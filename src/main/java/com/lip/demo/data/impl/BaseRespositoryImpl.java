/***************************************************************************
 *                                                                         *
 * Auto Generated BY CodeComment                                           *
 * Copyright(C) 2000-2016, JiangSu Yinhe Electronic Co.Ltd.                *
 * All Rights Reserved.                                                    *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Yinhe Elec Co.Ltd.       *
 * The copyright notice above does not evidence any actual or intended     *
 * publication of such source code.                                        *
 *                                                                         *
 **************************************************************************/
package com.lip.demo.data.impl;

import com.lip.demo.data.BaseRepository;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaDelete;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author lip@yinhe.com
 * @version v1.0.0
 * @ClassName: BaseRespository
 * @Description: dao 层基础类
 * @date 2016年8月3日 下午11:25:46
 */
@Repository
public class BaseRespositoryImpl<T> implements BaseRepository<T> {
    public final String deleteExceptionPre = "deleteEntitiesException";
    protected Class<T> clazz;
    @PersistenceContext
    protected EntityManager em;

    @SuppressWarnings("unchecked")
    public BaseRespositoryImpl() {
        try {
            Type genType = this.getClass().getGenericSuperclass();
            Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
            this.clazz = (Class<T>) params[0];
        } catch (Exception e) {
            //log.info("BaseRespository set T error: " + e.getMessage());
        }
    }

    /**
     * 如何不是直接继承的该基类则需要设置该泛型的参数
     *
     * @param clazz
     */
    protected void setClassT(Class<T> clazz) {
        this.clazz = clazz;
    }

    // 根据id查找
    public T findById(Number id) {
        try {
            return id == null ? null : em.find(clazz, id);
        } catch (Exception e) {
            //log.info("findById(" + id + ") error:" + e.getMessage());
            return null;
        }
    }

    // 增加
    @Transactional
    public void addEntity(T entity) {
        em.persist(entity);
    }

    // 更新
    @Transactional
    public void updateEntity(T entity) {
        em.merge(entity);
    }

    public int countEntities(List<Long> idList) {
        if (idList == null || idList.size() == 0) {
            return 0;
        }
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> criteria = cb.createQuery(Long.class);
        Root<T> root = criteria.from(clazz);
        criteria.select(cb.count(root)).where(cb.in(root.get("id")).value(idList));
        try {
            Long count = em.createQuery(criteria).getSingleResult();
            return count.intValue();
        } catch (Exception e) {
            //log.info("countEntities Exception: " + clazz.getTypeName()+e.getMessage());
            return 0;
        }
    }

    /**
     * @param idList
     * @return
     * @throws RuntimeException() if idList count != deleteid count
     */
    @Transactional
    public int deleteEntities(List<Long> idList) {
        // TODO Auto-generated method stub
        String exceptionMessage = "deleteEntitiesException: the count of deleteEntities does not equals to the size of idList!";
        if (idList == null || idList.size() == 0) {
            return 0;
        }
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaDelete<T> criteria = cb.createCriteriaDelete(clazz);
        Root<T> root = criteria.from(clazz);
        criteria.where(cb.in(root.get("id")).value(idList));
        int count = em.createQuery(criteria).executeUpdate();
        if (idList.size() == count) {
            return count;
        }
        throw new RuntimeException(exceptionMessage);
    }

    // 删除
    @Transactional
    public void deleteEntity(T entity) {
        em.remove(em.contains(entity) ? entity : em.merge(entity));
    }

    // 删除
    @Transactional
    public void deleteEntity(Number id) {
        em.remove(findById(id));
    }

    // 获取所有Entity，并按id升序排列
    public List<T> findAllOrderedById() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<T> criteria = cb.createQuery(clazz);
        Root<T> systemLog = criteria.from(clazz);
        criteria.select(systemLog).orderBy(cb.asc(systemLog.get("id")));
        return em.createQuery(criteria).getResultList();
    }

    /**
     * 将所有托管状态的bean改变为游离态
     */
    public void clearEntity() {
        em.clear();
    }
}
